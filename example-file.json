[
  {
    "name": "CODE_OF_CONDUCT.md",
    "path": "css-modules-transformer/CODE_OF_CONDUCT.md",
    "type": "file",
    "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\narnabchat2001@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
  },
  {
    "name": "CONTRIBUTING.md",
    "path": "css-modules-transformer/CONTRIBUTING.md",
    "type": "file",
    "content": "# Contribute to CSS Modules Transformer\n\n## Table of Contents\n\n* [Introduction](#introduction)\n* [Getting Started](#getting-started)\n* [Development Process](#development-process)\n* [Code Contributions](#code-contributions)\n* [Reporting Issues](#reporting-issues)\n* [Open Source Community](open-source-community)\n  * [Conduct](conduct)\n  * [Contributor License Agreement](contributor-license-agreement)\n  * [Documentation](documentation)\n\n## Introduction\n\nThank you for your interest in contributing to CSS Modules Transformer! This document outlines the guidelines for contributing to the project. By adhering to these guidelines, you can help us maintain a high-quality and sustainable codebase.\n\n## Getting Started\n\nBefore you start contributing, please take the following steps:\n\n1. **Fork the Repository:** Fork the CSS Modules Transformer repository on GitHub. This will create a copy of the repository in your own GitHub account.\n2. **Clone the Forked Repository:** Clone your forked repository to your local machine using the following command:\n\n```\ngit clone https://github.com/<your-username>/css-modules-transformer.git\n```\n\n3. **Set Up a Development Environment:** Set up a development environment on your local machine. This may involve installing necessary dependencies, configuring a code editor, and setting up a local development server.\n\n## Development Process\n\n1. **Create a Feature Branch:** When working on a new feature or fixing a bug, create a new feature branch from the `main` branch:\n\n```\ngit checkout -b <your-feature-branch-name>\n```\n\n2. **Make Changes:** Make your changes to the codebase in your feature branch. Follow the coding conventions and best practices to ensure code quality.\n\n3. **Commit Changes:** Commit your changes regularly using meaningful commit messages:\n\n```\ngit add <files>\ngit commit -m \"<commit-message>\"\n```\n\n4. **Push Changes:** Push your changes to your forked repository on GitHub:\n\n```\ngit push origin <your-feature-branch-name>\n```\n\n5. **Create a Pull Request:** Create a pull request to merge your feature branch into the `main` branch of the original repository. Provide a clear and concise description of your changes in the pull request.\n\n6. **Review and Feedback:** The project maintainers will review your pull request and provide feedback. Be prepared to address any feedback or suggestions to improve your contribution.\n\n## Code Contributions\n\nWhen contributing code to CSS Modules Transformer, please adhere to the following guidelines:\n\n* Use concise and descriptive variable and function names.\n* Follow the coding conventions and best practices used in the existing codebase.\n* Write well-commented code to help other contributors understand your changes.\n* Ensure that your code is tested and passes all the existing tests.\n* Keep your changes focused and avoid introducing unrelated changes.\n\n## Reporting Issues\n\nIf you encounter any bugs or issues with CSS Modules Transformer, please report them using the GitHub issue tracker. When reporting an issue, please provide the following information:\n\n* A concise and descriptive title that summarizes the issue.\n* A detailed description of the issue, including steps to reproduce the issue and any relevant error messages or logs.\n* The version of CSS Modules Transformer you are using.\n* If possible, provide a minimal reproducible example that demonstrates the issue.\n\n## Open Source Community\n\n### Conduct\nWe are committed to fostering a welcoming and inclusive open-source community. We expect all contributors to adhere to our [Code of Conduct](CODE_OF_CONDUCT.md) to create a respectful and collaborative environment.\n\n### Contributor License Agreement\nBy contributing to CSS Modules Transformer, you agree to the terms of our [Contributor License Agreement (CLA)](CLA.md). The CLA ensures that we can use your contributions in accordance with the project's license.\n\n### Documentation\nIf you have any questions or need help using or contributing to CSS Modules Transformer, don't hesitate to ask for help on the project's GitHub page or through the project's communication channels (e.g., Discord, Slack, etc.). Additionally, our [documentation](DOCUMENTATION.md) provides comprehensive information about using and contributing to the project.\n"
  },
  {
    "name": "LICENSE",
    "path": "css-modules-transformer/LICENSE",
    "type": "file",
    "content": "MIT License\n\nCopyright (c) 2024 Arnab Chatterjee\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  {
    "name": "README.md",
    "path": "css-modules-transformer/README.md",
    "type": "file",
    "content": "# css-modules-transformer\n[![npm version](https://badge.fury.io/js/css-module-transformer-beta.svg)](https://www.npmjs.com/package/css-module-transformer-beta)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n## Easily transition your codebase to CSS Modules for modular, maintainable styles!\n**Say goodbye to messy, global styles and hello to the power of CSS Modules!** This handy NPM package seamlessly transforms your JavaScript files to utilize scoped styles, making your codebase cleaner, more maintainable, and conflict-free. Managing CSS in larger projects can become cumbersome. Traditional CSS often leads to style bleed, where styles intended for one component affect others unintentionally. Additionally, manually handling CSS imports  and class names across multiple files can be tedious and error-prone.\n## ✨ What it does:\n- Automatically converts `className=\"example\"` to `className={styles.example}` for static class names.\n- Smartly handles dynamic class names: `className={dynamic-ClassName}` or `className=\"dynamic-ClassName\"` becomes`className={styles[dynamic-ClassName]}` .\n- Updates regular CSS imports to module-specific ones for proper integration, Ensures correct file paths and extensions for seamless usage.\n- No more manual replacements! Sit back and relax while `css-modules-transformer` does the heavy lifting.\n\n## 🌐 Example\n**Before:**\n``` js\nimport react from 'react';\nimport { render } from 'react-dom';\nimport './long/relative/path/styles.css';\n\nconst DummyComponent = () => {\n    return (\n        <div className=\"container\">\n            <div className=\"header-text\">\n            <h1>Hello, World!</h1>\n            </div>\n        </div>\n    );\n};\n\nexport default DummyComponent;\n```\n**After:**\n``` js\nimport react from 'react';\nimport styles from './long/relative/path/styles.module.css'; \n\nconst DummyComponent = () => {\n    return (\n        <div className={styles.container}>\n            <div className={styles[\"header-text\"]}>\n            <h1>Hello, World!</h1>\n            </div>\n        </div>\n    );\n};\n\nexport default DummyComponent;\n```\n## 🛠️ Getting Started: \n1. Install css-modules-transformer globally\n   ``` sh\n   npm install -g css-modules-transformer\n   ```\n2. Transform a file:\n   ``` sh\n   npx transform ./path/to/your-file.jsx\n   ```\n3. Witness the magic! ✨\n\n## Benefits:\n\n- **Modular Styles:** Each component owns its styles, preventing bleed and unintended conflicts.\n- **Improved Maintainability:** Easier to find and update styles specific to individual components.\n- **Scalable Codebase:** Manage large projects with confidence, thanks to organized and isolated styles.\n\n## 🚀 Upcoming Features:\nWe're actively working on expanding the package's capabilities:\n\n- Recursive Directory Handling: Transform multiple files within directories for effortless codebase-wide conversion.\n- Customize transformations with configuration options\n- Build Tool Integration: Seamlessly integrate with popular build tools like Webpack and Rollup for streamlined workflows.\n- Customizable Class Name Formatting: Control how generated class names are formatted for greater flexibility and alignment with project conventions.\n\n## 📝 Additional Notes\n- Remember to rename your CSS files with the .module.css extension to ensure compatibility with CSS Modules.\n- Adjust your build process to handle CSS Modules appropriately, typically using a plugin or loader.\n- Thoroughly test your transformed components to guarantee styles function as expected.\n\n## 📝 Limitations and Edge Cases:\n\n- Currently supports single-file transformation.\n- Doesn't handle nested imports or complex directory structures (yet!).\n- Manual adjustments might be required for intricate codebases.\n\n\n## 🌍 Support\n- If you encounter any issues or have questions, feel free to open an issue \n\n"
  },
  {
    "name": "bin",
    "path": "css-modules-transformer/bin",
    "type": "directory",
    "children": [
      {
        "name": "transform.js",
        "path": "css-modules-transformer/bin/transform.js",
        "type": "file",
        "content": "#!/usr/bin/env node\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst filePath = process.argv[2];\n\nif (!filePath) {\n  console.error(\"Please provide a file path.\");\n  process.exit(1);\n}\n\ntry {\n  // Read file content once and store it\n  let fileContent = fs.readFileSync(filePath, \"utf-8\");\n\n  // Function to transform imports\n  function transformImports(content) {\n    const importRegex = /import\\s+(['\"])(.+\\.css)\\1\\s*;/gi;\n    const importMatch = content.match(importRegex);\n\n    if (importMatch) {\n      const entireImportStatement = importMatch[0];\n      const importPath = path.dirname(entireImportStatement.replace(/import\\s+(['\"])/, '').replace(/['\"];/, ''));\n      const importFileName = path.basename(entireImportStatement).replace(\".css\", \".module.css\");\n      const relativePath = path.relative(path.dirname(filePath), importPath);\n      const newImport = `import styles from '${path.join(relativePath, importFileName)}`;\n      return content.replace(importRegex, newImport);\n    } else {\n      console.error(\"CSS import statement not found.\");\n      return content; // Return original content if no import found\n    }\n  }\n\n  // Function to transform class names\n  function transformClassNames(content) {\n    const regex = /className\\s*=\\s*[\"']([^\"']+)[\"']/g;\n    return content.replace(regex, (match, className) => {\n      return `className={styles${className.includes(\"-\") ? `[\"${className}\"]` : `.${className}`}}`;\n    });\n  }\n\n  // Apply transformations\n  fileContent = transformImports(fileContent);\n  fileContent = transformClassNames(fileContent);\n\n  // Write the transformed content to the file\n  fs.writeFileSync(filePath, fileContent, \"utf-8\");\n  console.log(`Imports and class names in ${filePath} have been transformed.`);\n} catch (error) {\n  console.error(\"Error during file transformation:\", error);\n}\n"
      }
    ]
  },
  {
    "name": "package-lock.json",
    "path": "css-modules-transformer/package-lock.json",
    "type": "file",
    "content": "{\n  \"name\": \"css-module-transformer\",\n  \"version\": \"1.0.1\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"css-module-transformer\",\n      \"version\": \"1.0.1\",\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"transform\": \"bin/transform.js\"\n      }\n    }\n  }\n}\n"
  },
  {
    "name": "package.json",
    "path": "css-modules-transformer/package.json",
    "type": "file",
    "content": "{\n  \"name\": \"css-module-transformer\",\n  \"version\": \"1.0.1\",\n  \"description\": \"A tool that automates the conversion of your codebase to CSS Modules. It seamlessly transforms imports and class names, ensuring styles are scoped to their corresponding components and improving code maintainability.\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"bin\": {\n    \"transform\": \"./bin/transform.js\"\n  },\n  \"files\": [\n    \"bin\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/arnab2001/css-modules-transformer.git\"\n  },\n  \"author\": \"arnab2001\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/arnab2001/css-modules-transformer/issues\"\n  },\n  \"homepage\": \"https://github.com/arnab2001/css-modules-transformer#readme\"\n}\n"
  }
]